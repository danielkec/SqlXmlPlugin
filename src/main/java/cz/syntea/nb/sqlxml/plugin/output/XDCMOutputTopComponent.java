/*
 *  Copyright 2009 Syntea software group a.s.
 * 
 *  This file may be used, copied, modified and distributed only in accordance
 *  with the terms of the limited licence contained in the accompanying
 *  file LICENSE.TXT.
 * 
 *  Tento soubor muze byt pouzit, kopirovan, modifikovan a siren pouze v souladu
 *  s licencnimi podminkami uvedenymi v prilozenem souboru LICENSE.TXT.
 */
package cz.syntea.nb.sqlxml.plugin.output;

import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.text.EditorKit;
import org.openide.text.CloneableEditorSupport;
import org.openide.util.NbBundle;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public final class XDCMOutputTopComponent extends TopComponent {

  private static XDCMOutputTopComponent instance;
  /** path to the icon used by the component and its open action */
  //static final String ICON_PATH = "cz/syntea/xdef/nb/createmode/consxicon.png";
  private static final String PREFERRED_ID = "XDCMOutputTopComponent";
  private static final long serialVersionUID = 8309390065262805339L;

  private XDCMOutputTopComponent() {
	initComponents();
	setName("SQLXML");
	setToolTipText("SQLXML Output");
	//setIcon(ImageUtilities.loadImage(ICON_PATH, true));
	//BaseTextUI eui = new BaseTextUI();
	//eui.installUI(jEditorPane1);
	EditorKit kit = CloneableEditorSupport.getEditorKit("text/xml");
	jEditorPane1.setEditorKit(kit);
	//JComponent myEditorComponent =
	//		Utilities.getEditorUI(jEditorPane1).getComponent();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized XDCMOutputTopComponent getDefault() {
	if (instance == null) {
	  instance = new XDCMOutputTopComponent();
	}
	return instance;
  }

  /**
   * Obtain the XDCMOutputTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized XDCMOutputTopComponent findInstance() {
	TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
	if (win == null) {
	  Logger.getLogger(XDCMOutputTopComponent.class.getName()).warning(
			  "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
	  return getDefault();
	}
	if (win instanceof XDCMOutputTopComponent) {
	  return (XDCMOutputTopComponent) win;
	}
	Logger.getLogger(XDCMOutputTopComponent.class.getName()).warning(
			"There seem to be multiple components with the '" + PREFERRED_ID
			+ "' ID. That is a potential source of errors and unexpected behavior.");
	return getDefault();
  }

  @Override
  public int getPersistenceType() {
	return TopComponent.PERSISTENCE_NEVER;
  }

  @Override
  public void componentOpened() {
	// TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
	// TODO add custom code on component closing
  }

  /** replaces this in object stream */
  @Override
  public Object writeReplace() {
	return new ResolvableHelper();
  }

  @Override
  protected String preferredID() {
	return PREFERRED_ID;
  }

  final static class ResolvableHelper implements Serializable {

	private static final long serialVersionUID = -2533823278918754560L;

	public Object readResolve() {
	  return XDCMOutputTopComponent.getDefault();
	}
  }
  private static final String MODE = "output"; // NOI18N

  public void open() {
	Mode m = WindowManager.getDefault().findMode(MODE);
	m.dockInto(this);
	super.open();
  }

  public void printXML(String xml) {
	jEditorPane1.setText(xml);
  }
}
